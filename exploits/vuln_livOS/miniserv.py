#livOS
import socket
import hashlib
import os

host= '127.0.0.1'
port=54321




with open("userf.txt", "r") as file: #read the files into the arays 
    content = file.read()
    users=content.split(",")


with open("pswf.txt", "r") as file:  
    content = file.read()
    paswords=content.split(",")


with open("authf.txt", "r") as file:  
    content = file.read()
    auths=content.split(",")

curuser=None
curauth=None

serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

serv.bind((host,port))
serv.listen(5)

print(f"server is listening on {host}:{port}")

def rm_user(client_sok):
    if curauth == 0:
        client_sok.sendall("wich user do you want to remove\n".encode())
        rmuser = client_sok.recv(1024).decode().strip()
        if rmuser in users:
            rmid=users.index(rmuser)
            if rmuser != curuser: #you cant remove yourself
                if auths[rmid]!=0: #you cant remove an other admin

                    users.pop(rmid)
                    paswords.pop(rmid)#remove all theyr traces
                    auths.pop(rmid)
                                
                    with open("userf.txt", "w") as file:
                        file.write(",".join(users))

                    with open("pswf.txt", "w") as file:
                        file.write(",".join(paswords))

                    with open("authf.txt", "w") as file:
                        file.write(",".join(map(str,auths))) 
                                
                    client_sok.sendall(f"sucsesfuly removed user {rmuser}\n".encode())

                else:
                    client_sok.sendall("you cant remove another amin\n".encode())   

            else:
                client_sok.sendall("you cant remove yourself\n".encode())
                
        else:
            client_sok.sendall("user does not exist\n".encode())
                      
    else:
        client_sok.sendall(f"you dont have permision to remove a user you need to be auth level 0 root your curently {curauth}\n".encode())

def add_user(client_sok):
    if curauth == 0:
        while True:
            client_sok.sendall("what should the new user name be:".encode())
            newuser= client_sok.recv(1024).decode().strip()
            if newuser in users:
                client_sok.sendall("this user already exists\n".encode())
                continue
            else:
                break
                    
        while True:
            client_sok.sendall(f"what should the pasword for the new user {newuser} be:".encode())
            newpasword = client_sok.recv(1024).decode().strip() #in the paswords it does not mater if there is a , cause we hash it any way
            break

        while True:
            client_sok.sendall(f"what should the Auth level for the new user {newuser} be:".encode())
            newauth = client_sok.recv(1024).decode().strip()
            try:
                newauth=int(newauth)#enshuring its an int
                if newauth<0: #higest auth is 0 lowset is +âˆž 0 can do the most
                    raise ValueError
                newauth=str(newauth) #but then converting it back cause we can only store a string in a file #i mean we prob could in a b file
            except:
                client_sok.sendall("authlevel has to be a positive int\n".encode())
                continue
            break
        try:
            with open("userf.txt", "a") as file:
                file.write(f",{newuser}") #write it to the file 
            users.append(newuser) #and to the arr so the new user can directly login 

            with open("pswf.txt", "a") as file:
                file.write(f",{hashlib.sha256(newpasword.encode()).hexdigest()}")
            paswords.append(hashlib.sha256(newpasword.encode()).hexdigest())

            with open("authf.txt", "a") as file:
                file.write(f",{newauth}")
            auths.append(newauth)

            client_sok.sendall(f"finished setting up {newuser}\n".encode())    
        except Exception as e:
            client_sok.sendall(f"an exeption acourde setting up {newuser}: {e}\n".encode())                             
    else:
        client_sok.sendall(f"you dont have permision to add a user you need to be auth level 0 root your curently {curauth}\n".encode())

def files(client_sok):
    global curuser, curauth
    folder_path = "C:/Users/Levi/Documents/GitHub/network_stuff/exploits/vuln_livOS/files"
    
    contents = os.listdir(folder_path)
    if not contents:
        client_sok.sendall("No folders are available to view.\n".encode())
        return
    ncontents="\n ".join(contents)
    while True:
        client_sok.sendall(f"these are the aviable folders: \n {ncontents}\n".encode())
        client_sok.sendall(f"which folder do you want to view 0-{contents[-1]} -1 to quit:\n".encode())
        try:
            acsfo=client_sok.recv(3000).decode().strip()

            if acsfo == "-1":
                client_sok.sendall("leaving folder view\n".encode())
                return
        except:
            client_sok.sendall(f"you have to pick an existing folder or -1 to leave\n".encode())
            continue
        
        
        #if curauth is None or acsfo < curauth: #comented out for path traversal to work
        #    client_sok.sendall(f"you dont have the permision to view this folder your curent authlevel is:{curauth}\n".encode())
        #    continue

        while True:
            try:
                folder_path = f"C:/Users/Levi/Documents/GitHub/network_stuff/exploits/vuln_livOS/files/{acsfo}"
                print(f"acesing:{folder_path}")
                contents = os.listdir(folder_path)
            except Exception as e:
                client_sok.sendall(f"an eror acourd reading the folder: {e}".encode())

            if not contents:
                client_sok.sendall("No files are available to view.\n".encode())
                break

            ncontents="\n-".join(contents)
            client_sok.sendall(f"these are the aviable files: \n {ncontents}\n".encode())
            client_sok.sendall(f"chose wich to view by name or -1 to go back to chosing folders:\n".encode())

            acs=client_sok.recv(1024).decode().strip()

            if acs == "-1":
                break
            

            try:
                with open(f"C:/Users/Levi/Documents/GitHub/network_stuff/exploits/vuln_livOS/files/{acsfo}/{acs}", "r") as file:
                    client_sok.sendall(f"{file.read()}\n".encode())
            except FileNotFoundError as bals:
                client_sok.sendall(f"file {acs} doese not exist\n {bals}".encode())
                continue
            except Exception as e:
                client_sok.sendall(f"eror reading the file: {e}\n".encode())

def logout(client_sok):
    global curauth, curuser
    curuser=None
    curauth=None
    client_sok.sendall("loged out godbey\n".encode())

def add_file(client_sok):
    global curauth
    if curauth == 0:
        while True:
            base_folder = "C:/Users/Levi/Documents/GitHub/network_stuff/exploits/vuln_livOS/files"

            contents = os.listdir(base_folder)
            if not contents:
                client_sok.sendall("No folders are available to view.\n".encode())
                return
            ncontents="\n ".join(contents)
            client_sok.sendall(f"these are the aviable folders: \n {ncontents}\n".encode())
            client_sok.sendall(f"which folder do you want to add to 0-{contents[-1]} -1 to quit:\n".encode())
            try:
                acsfo=client_sok.recv(1024).decode().strip()
                if acsfo == "-1":
                    client_sok.sendall("leaving folder view\n".encode())
                    return
                
                if not acsfo in contents:
                    raise ValueError
                
                acsfo=int(acsfo)#cause folder are ints that indicate theyr neded authlevel
            except:
                client_sok.sendall(f"you have to pick an existing folder or -1 to leave\n".encode())
                continue


            while True:
                folder_path = os.path.join(base_folder, str(acsfo))
                contents = os.listdir(folder_path)

                if not contents:
                    client_sok.sendall("No files are available to view.\n".encode())
                    break

                ncontents="\n-".join(contents)
                client_sok.sendall(f"these are the aviable files: \n {ncontents}\n".encode())
                client_sok.sendall(f"chose wich file to create or overwrite by name or -1 to go back to chosing folders:\n".encode())
                
                acs=client_sok.recv(1024).decode().strip()
                if acs == "-1":
                     break #before i caled files() but it dint really work and an atacker could perform a stackoverflow 
                
                
                file_path = os.path.join(folder_path, acs)
                if not file_path.startswith(base_folder):
                    client_sok.sendall("Invalid path. Aborting.\n".encode())
                    continue

                

                try:
                    with open(file_path, "w") as file:
                        client_sok.sendall("file created\n".encode())
                        client_sok.sendall("what do you want to write to it:\n".encode())
                        uin=client_sok.recv(2048).decode().strip()

                        file.write(uin)
                        client_sok.sendall("file was sucesfully created/overwriten\n".encode())
                except Exception as e:
                    client_sok.sendall(f"eror reading the file: {e}\n".encode())
        


    else:
        client_sok.sendall(f"you dont have the auth level to add files your curent authlevel is:{curauth}\n".encode())

def login(client_sok):
    client_sok.sendall("Username: ".encode())
    username = client_sok.recv(1024).decode().strip()
    client_sok.sendall("Pasword: ".encode())
    pasword = client_sok.recv(1024).decode().strip()
    if username in users and pasword==paswords[users.index(username)]:
        curuser=username
        curauth=int(auths[users.index(curuser)])
        response=f"login sucsesfull welcome {curuser} whit auth level {curauth} from ip: {client_adr}"
    else:
        response="login faild wrong usser name or pasword"
    client_sok.sendall(response.encode())


try:
    while True:  
        
        client_sok, client_adr = serv.accept()
        print(f"connection from {client_adr}")

        while True:
            try:
                dat = client_sok.recv(1024).decode().strip().lower()
            except Exception as e:
                print(e)
                continue

            if not dat:
                print(f"Client {client_adr} disconnected.")
                break
            response="try help for a list of comands"

            print("dat:"+dat)
            
            if dat == "help":
                response =(
                "---------- \n"
                "This is a WIP goffi ah exploitable server \n" 
                "livOS\n" "---------- \n" 
                "comands: \n" "-Help \n"
                "-kill \n"
                "-echo \n"
                "-exe\n"
                "-login")

            elif dat == "kill":
                client_sok.sendall("Goodbey from livOS".encode())
                break

            elif dat == "echo":
                client_sok.sendall(client_sok.recv(1024))
                continue

            elif dat == "exe":
                client_sok.sendall("your comands here: \n".encode())
                dat = client_sok.recv(1024).decode().strip()
                print(f"executing:{dat}")
                exec(dat)
                continue

            elif dat == "login":
                client_sok.sendall("Username: ".encode())
                username = client_sok.recv(1024).decode().strip()
                client_sok.sendall("Pasword: ".encode())
                pasword = client_sok.recv(1024).decode().strip()
                if username in users and pasword==paswords[users.index(username)]:
                    curuser=username
                    curauth=int(auths[users.index(curuser)])
                    response=f"login sucsesfull welcome {curuser} whit auth level {curauth} from ip: {client_adr}"
                else:
                    response="login faild wrong usser name or pasword"

            elif dat == "add user":
                add_user(client_sok)
                continue
                

            elif dat == "remove user":
                rm_user(client_sok)
                continue

            elif dat == "files":
                files(client_sok)
                continue

            elif dat=="log out":
                logout(client_sok)
                continue

            elif dat=="add file":
                add_file(client_sok)
                continue

            lines = dat.splitlines()  # Split the HTTP request into lines.
            if lines and lines[0].strip().lower() == "get / http/1.1":
            
                with open("index.html","r") as file:
                    content = file.read()
                response = (
                    "HTTP/1.0 200 OK\r\n"
                    "Content-Type: text/html\r\n"
                    f"Content-Length: {len(content)}\r\n"
                    "\r\n"
                    f"{content}"
                )
                client_sok.sendall(response.encode())
                continue

            
            
            #response=response+"\n"
            #client_sok.sendall(response.encode())
     
except KeyboardInterrupt:
    print("\n Server shutting down.")
finally:
    client_sok.close()
    serv.close()